[tool.poetry]
name = "crawlers-python"
version = "0.1.0"
description = "xtracted crawlers"
authors = ["nono <bruno.abitbol@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
playwright = "^1.44.0"
pydantic-settings = "^2.4.0"
aiofiles = "^24.1.0"
types-aiofiles = "^24.1.0.20240626"
aiohttp = "^3.10.10"
# xtracted-common = { path = "../xtracted-common/" , develop=true }
xtracted-common = { git="git@github.com:jobomix/xtracted-common.git" }
camoufox = {extras = ["geoip"], version = "^0.4.11"}
colorama = "^0.4.6"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
black = "^24.4.2"
pytest-playwright = "^0.5.0"
debugpy = "^1.8.2"
pytest-asyncio = "^0.23.8"
pytest-docker = "^3.1.1"
pyright = "^1.1.377"
ruff = "^0.6.2"
mypy = "^1.11.1"
poethepoet = "^0.29.0"
pytest-aiohttp = "^1.0.5"
# xtracted-tests = { path = "../xtracted-tests/",  develop=true }
xtracted-tests = { git="git@github.com:jobomix/xtracted-tests.git" }
pytest-env = "^1.1.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = ['.']
testpaths = ["tests"]
# asyncio_default_fixture_loop_scope = "session"
log_cli = true
asyncio_mode = "auto"
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
env = [
    "RUN_ENV=test"
]

[tool.poe.tasks]
crawl_job_worker = "python -m xtracted.workers.pg_crawl_job_worker"
fake_amazon_server = "python -m tests.integration.amazon_server"

[tool.poe.tasks.remove_keys]
script = "xtracted.utils.redis_management:remove_keys"

[tool.poe.tasks.send_message]
script = "xtracted.utils.redis_management:send_message"

[tool.poe.tasks.send_messages]
script = "xtracted.utils.redis_management:send_messages"
# ----
# mypy
# ----

[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
strict = true
implicit_reexport = true
disable_error_code = ["type-arg", "import-untyped"] 
disallow_untyped_defs = true 
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "asyncpg.*",
    "pydantic.*",
    "auth0.*",
    "openfga_sdk.*",
    "snapshottest.*"
]
ignore_missing_imports = true


# ----
# ruff
# ----

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py38"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F", "W", "I"]
ignore = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

